syntax on

set colorcolumn=80

set number

set hidden
set history=100

set nowrap
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set autoindent
set nofixeol

" https://www.linux.com/news/vim-tips-moving-around-using-marks-and-jumps
set viminfo='100,f1

"When running a search, get Vim to highlight found words:
set hlsearch

"Ability to cancel a search with Escape:
" nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>

" show matching parenthesis
set showmatch

" DO NOT use arrows
" life's hard
" map <D-A-RIGHT> <C-w>l
" map <D-A-LEFT> <C-w>h
" map <D-A-DOWN> <C-w><C-w>
" map <D-A-UP> <C-w>W
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
noremap <up> <nop>

nnoremap <Leader><Leader> :e#<CR>

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" map space as leader.
let mapleader = " "

" from hjkl to jkl; and h to ;
"noremap ; l
"noremap l k
"noremap k j
"noremap j h
"noremap h ;

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" paste-nopaste switcher

set pastetoggle=<F2>

" list on / list off switcher
nnoremap <F4> :set list!<CR>
:set listchars=eol:‚èé,tab:‚êâ¬∑,trail:‚ê†,nbsp:‚éµ

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" tabs stuff
" change tab
map <leader>h :tabp<cr>
map <leader>l :tabn<cr>
map <leader>k :tabl<cr>
map <leader>j :tabr<cr>

nmap <leader>a :tabnew<cr>
nmap <leader>w :tabclose<cr>
" <Tab> is <c-i>: don't overwrite it!

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" buffers stuff

" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

set switchbuf=usetab

" Change buffer with CTRL
nnoremap <C-n> :bnext<CR>
nnoremap <C-p> :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nnoremap <C-a> :bp <BAR> bd #<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""

" To clear the last used search pattern:
nnoremap <F3> :let @/ = ""<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" python stuff

" add self as first parameter of a function. 
" cursor at the beginning of func name.
let P = 'f(aself, '


""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" Templates

if has("autocmd")
  augroup templates
    autocmd BufNewFile *.sh 0r ~/.vim/templates/bash_script.sh
    autocmd BufNewFile *.h  0r ~/.vim/templates/header.h
    autocmd BufNewFile *.tex 0r ~/.vim/templates/main.tex
    autocmd BufNewFile LICENSE_MIT  0r ~/.vim/templates/LICENSE_MIT
    autocmd BufNewFile LICENSE_APACHE  0r ~/.vim/templates/LICENSE_APACHE
  augroup END
endif

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: utf-8 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># -*- coding: None -*-\<nl>\"|$
  autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
  "autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
augroup END


""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc

" To delete without copying
nnoremap <leader>d "_d
xnoremap <leader>d "_d
xnoremap <leader>p "_dP

" To copy to the system clipboard
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

"https://stackoverflow.com/a/1676672/7150172
" Commenting blocks of code.
autocmd FileType c,cpp,java,scala             let b:comment_leader = '// '
autocmd FileType sh,ruby,python,yaml          let b:comment_leader = '# '
autocmd FileType conf,fstab             let b:comment_leader = '# '
autocmd FileType tex                    let b:comment_leader = '% '
autocmd FileType mail                   let b:comment_leader = '> '
autocmd FileType vim                    let b:comment_leader = '" '
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" nerdtree
nnoremap <Leader>f :NERDTreeToggle<Enter>
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1 
" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
let NERDTreeMapActivateNode=';'
let g:NERDTreeDirArrowExpandable = '‚ñ∏'
let g:NERDTreeDirArrowCollapsible = '‚ñæ'
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" Source other vimrcs
source $HOME/.vim/vimrcs/python.vimrc


