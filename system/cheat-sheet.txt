# Cheat sheet 

## useful ubuntu commands 

sudo ubuntu-drivers autoinstall
sudo systemctl disable nvidia-fallback.service
sudoedit /etc/default/grub
sudo update-grub

---

Re: Suspend-resume problems on Ubuntu 18.04

It is the buggy nouveau driver again. That's what solved the issue for me.
Edit the file /etc/default/grub.

$ sudoedit /etc/default/grub.

Add "nouveau.modeset=0" to the line that says GRUB_CMDLINE_LINUX then press ^O to save the file and ^X to live then run.

$ sudo update-grub.

Reboot.


---

systemctl set-default multi-user.target

sudo telinit (3|5)

systemctl set-default graphical.target

---

GRUB_CMDLINE_LINUX_DEFAULT="acpi_osi="

---


- set an action for when the lid is closed:
```
sudo vim /etc/systemd/logind.conf
# modify #HandleLidSwitch=suspend with one of poweroff|ignore|hibernate|suspend
systemctl restart systemd-logind.service
```


---

## how to boot in textmode 


edit /etc/default/grub

# Stops the ubuntu purple screen
#GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"

# Uncomment to disable graphical terminal (grub-pc only) 
GRUB_TERMINAL=console


sudo update-grub


## GPG

http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/


    gpg --import public.key
    gpg --allow-secret-key-import --import private.key
    gpg --list-secret-keys --keyid-format LONG

- take e.g. the `3AA...` from ``sec   4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]`

    git config --global user.signingkey <long>

- to print the public key in ASCII format

    gpg --armor --export 3AA5C34371567BD2

references:
- https://help.github.com/en/articles/telling-git-about-your-signing-key
- https://help.github.com/en/articles/generating-a-new-gpg-key


## Docker

https://docs.docker.com/install/linux/docker-ce/ubuntu/
https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user

## SSH 

Configure ssh

- copy pb/pv key in .ssh
- do `eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
- change permission if needed: 
    chmod 400 ~/.ssh/id_rsa


## Git

## Working with Git

### Quick Start
git clone <url>                     # Clone directory
git checkout -b <new-branch>        # Create new local branch
git push -u origin <new-branch>     # Sync local branch with remote
git checkout <branch>               # Checkout branch
git push origin <branch>            # Push branch to remote

git branch -d <branchname>      # deletes local branch
git push origin :<branchname>   # deletes remote branch

git subtree push --prefix docs origin gh-pages  # push docs as subtree to gh-pages



### Clone Directory
git clone <url>



### Create Project
cd project/
git init                    # initializes the repository
git add .                   # add those 'unknown' files
git commit                  # commit all changes, edit changelog entry
git rm --cached <file>...   # ridiculously complicated command to undo, in case you forgot .gitignore



### Branching and Merging
git branch                          # show list of all branches (* is active)
git checkout -b linux-work          # create a new branch named "linux-work"
<make changes>
git commit -a
git checkout master                 # go back to master branch
git merge linux-work                # merge changesets from linux-work (Git >= 1.5)
git pull . linux-work               # merge changesets from linux-work (all Git versions)
git branch -m <oldname> <newname>   # rename branch
git branch -m <newname>             # rename current branch



### Delete Project
git branch -d <branchname>      # deletes local branch
git push origin :<branchname>   # deletes remote branch
git remote prune <branchname>   # update local/remote sync



### Merging Upstream

git remote -v                                   # Get list of remote branches
git remote add upstream <upstream github url>   # Add original as upstream
git remote -v                                   # Check upstream

git fetch upstream                              # Get original repo
git checkout development                        # Switch to main branch in local fork
git merge upstream/development                  # Merge original with fork

git diff --name-only | uniq | xargs subl        # Fix conflicts in Sublime Text



### Importing Patches
git apply < ../p/foo.patch
git commit -a



### Exporting Patches
<make changes>
git commit -a -m "commit message"
git format-patch HEAD^  # creates 0001-commit-message.txt
                        # (HEAD^ means every patch since one revision before the
                                                # tip of the branch, also known as HEAD)




### Inspecting Revisions

# inspect history visually
gitk    # this opens a Tk window, and shows you how the revisions are connected

# inspect history
git log     # this pipes a log of the current branch into your PAGER
git log -p  # ditto, but append a patch after each commit message

# inspect a specific commit
git show HEAD   # show commit info, diffstat and patch
                # of the tip of the current branch



### Referring to Revisions

# by name
git log v1.0.0  # show history leading up to tag "v1.0.0"
git log master  # show history of branch "master"

# relative to a name
git show master^    # show parent to last revision of master
git show master~2   # show grand parent to tip of master
git show master~3   # show great grand parent to tip of master (you get the idea)

# by output of "git describe"
git show v1.4.4-g730996f    # you get this string by calling "git describe"

# by hash (internally, all objects are identified by a hash)
git show f665776185ad074b236c00751d666da7d1977dbe
git show f665776    # a unique prefix is sufficient

# tag a revision
git tag v1.0.0                      # make current HEAD known as "v1.0.0"
git tag interesting v1.4.4-g730996f # tag a specific revision (not HEAD)



### Comparing Revisions
# diff between two branches
git diff origin..master             # pipes a diff into PAGER
git diff origin..master > my.patch  # pipes a diff into my.patch

# get diffstat of uncommitted work
git diff --stat HEAD


### Submodule

(from https://gist.github.com/myusuf3/7f645819ded92bda6677)
To remove a submodule you need to:

- Delete the relevant section from the .gitmodules file.
- Stage the .gitmodules changes git add .gitmodules
- Delete the relevant section from .git/config.
- Run git rm --cached path_to_submodule (no trailing slash).
- Run rm -rf .git/modules/path_to_submodule (no trailing slash).
- Commit git commit -m "Removed submodule <name>"
- Delete the now untracked submodule files rm -rf path_to_submodule


### Duplicate a repo

https://help.github.com/en/articles/duplicating-a-repository

git clone --bare https://github.com/exampleuser/old-repository.git
cd old-repository.git
git push --mirror https://github.com/exampleuser/new-repository.git


### Assume tracked file unchanged and undo

git update-index --assume-unchanged file
git update-index --no-assume-unchanged [<file> ...]

## Generic Help

man <cmd>
info <cmd>


